#!/usr/bin/env python
import os, sys
from ConfigParser import ConfigParser
from optparse import OptionParser

from etcsvn.defaults import CONFIGFILE
from etcsvn.main import EtcSvn

parser = OptionParser()
parser.add_option('--root', action='store', type='string', dest='root',
                  default='/', help='Use another directory as root.')
parser.add_option('--workspace', action='store', type='string', dest='workspace',
                  default='', help='Use a special workspace.')
parser.add_option('-m', '--message', action='store', type='string', dest='message',
                  default='Automatic Commit', help='send a commit message')


opts, args = parser.parse_args(sys.argv[1:])

config = ConfigParser()
config.read(CONFIGFILE)

es = EtcSvn(config)

COMMANDS = ['create', 'setup', 'update', 'checkup', 'backup', 'restore', 'clean',
            'import', 'export', 'status', 'commit', 'listfiles']

if not len(args):
    raise RuntimeError, 'etcsvn <cmd> where cmd is in %s' % ', '.join(COMMANDS)


command = args[0]

# import and export need a filename arguement
filename = None
if command in ['import', 'export']:
    try:
        filename = args[1]
    except IndexError:
        raise IndexError, '%s command needs a filename argument' % command
    if filename[0] != '/':
        print 'changing relative file', filename
        filename = os.path.join(os.getcwd(), filename)
        print 'changed to', filename
        

# load config if needed
if command in ['checkup', 'backup', 'restore', 'import', 'export', 'listfiles']:
    es.get_config()

    
# ugly command tree
if command == 'create':
    es.create_repos()
elif command == 'setup':
    es.checkout_workspace()
elif command == 'update':
    es.update_workspace()
elif command == 'checkup':
    es.check_files()
elif command == 'backup':
    es.update_from_system()
elif command == 'restore':
    es.export_to_system()
elif command == 'clean':
    es.remove_workspace()
elif command == 'import':
    es.import_file(filename)
elif command == 'export':
    es.export_file(filename)
elif command == 'status':
    es.show_status()
elif command == 'commit':
    es.commit(opts.message)
elif command == 'listfiles':
    files  = es.get_filelist()
    for afile in files:
        print afile
else:
    raise RuntimeError, '%s is not a supported command.' % command
